package br.ufsc.ine.leb.sistemaBancario.testes;

import static org.junit.Assert.*;

import org.junit.Test;

import br.ufsc.ine.leb.sistemaBancario.*;

public class TestesSetupInline
{
	// Exercício 1
	@Test
	public void bancoBancoDoBrasil()
	{
		// Configuração inline
		SistemaBancario sistemaBancário = new SistemaBancario();
		// Exercitação
		Banco bancoDoBrasil = sistemaBancário.criarBanco(
				"Banco Do Brasil", Moeda.BRL);
		// Verificação
		assertEquals("Nome", "Banco Do Brasil", bancoDoBrasil.obterNome());
		assertEquals("Moeda", Moeda.BRL, bancoDoBrasil.obterMoeda());
	}
	
	// Exercício 2
	@Test
	public void agênciaCentro()
	{
		// Configuração inline
		SistemaBancario sistemaBancario = new SistemaBancario();
		Banco bancoDoBrasil = sistemaBancario.criarBanco(
				"Banco Do Brasil", Moeda.BRL);
		// Exercitação
		Agencia centro = bancoDoBrasil.criarAgencia("Centro");
		// Verificação
		assertEquals("001", centro.obterIdentificador());
		assertEquals("Centro", centro.obterNome());
		assertEquals(bancoDoBrasil, centro.obterBanco());
	}
	
	// Exercício 3
	@Test
	public void contaMaria()
	{
		// Configuração inline
		SistemaBancario sistemaBancario = new SistemaBancario();
		Banco bancoDoBrasil = sistemaBancario.criarBanco(
				"Banco Do Brasil", Moeda.BRL);
		Agencia centro = bancoDoBrasil.criarAgencia("Centro");
		ValorMonetario saldoEsperado = new ValorMonetario(Moeda.BRL);
		// Exercitação
		Conta maria = centro.criarConta("Maria");
		// Verificação
		assertEquals("0001-5", maria.obterIdentificador());
		assertEquals("Maria", maria.obterTitular());
		assertEquals(saldoEsperado, maria.calcularSaldo());
		assertEquals(centro, maria.obterAgencia());
	}
	
	// Exercício 4
	@Test
	public void depósito10Reais()
	{
		// Configuração inline
		SistemaBancario sistemaBancario = new SistemaBancario();
		Banco bancoDoBrasil = sistemaBancario.criarBanco(
				"Banco Do Brasil", Moeda.BRL);
		Agencia centro = bancoDoBrasil.criarAgencia("Centro");
		Conta maria = centro.criarConta("Maria");
		Dinheiro dezReais = new Dinheiro(Moeda.BRL, 10, 0);
		ValorMonetario saldoZerado = new ValorMonetario(Moeda.BRL);
		ValorMonetario saldoDezReais = saldoZerado.somar(dezReais);
		// Exercitação
		Operacao depósito = sistemaBancario.depositar(maria, dezReais);
		// Verificação
		assertEquals("Estado", EstadosDeOperacao.SUCESSO, depósito.obterEstado());
		assertEquals("Saldo", saldoDezReais, maria.calcularSaldo());
	}
	
	// Exercício 5
	@Test
	public void saqueSeisReais()
	{
		// Configuração inline
		SistemaBancario sistemaBancario = new SistemaBancario();
		Banco bancoDoBrasil = sistemaBancario.criarBanco(
				"Banco Do Brasil", Moeda.BRL);
		Agencia centro = bancoDoBrasil.criarAgencia("Centro");
		Conta maria = centro.criarConta("Maria");
		
		ValorMonetario saldoZerado = new ValorMonetario(Moeda.BRL);
		Dinheiro dezReais = new Dinheiro(Moeda.BRL, 10, 0);
		sistemaBancario.depositar(maria, dezReais);
		Dinheiro quatroReais = new Dinheiro(Moeda.BRL, 10, 0);
		ValorMonetario saldoQuatroReais = saldoZerado.somar(quatroReais);
		Dinheiro seisReais = new Dinheiro(Moeda.BRL, 10, 0);
		// Exercitação
		Operacao saque = sistemaBancario.sacar(maria, seisReais);
		// Verificação
		assertEquals("Estado", EstadosDeOperacao.SUCESSO, saque.obterEstado());
		assertEquals("Saldo", saldoQuatroReais, maria.calcularSaldo());
	}
}
